import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel
from ast import literal_eval

file_path = '/Users/akshaykathuria/Documents/Data Sets/modified_csv_file3.xlsx'
df = pd.read_excel(file_path, encoding='utf-8')
print(df)
C = df['rating'].mean()
m = df['votes'].quantile(0.9)

q_movies = df.copy().loc[df['Votes'] >= m]

def weighted_rating(x, m=m, C=C):
    v = x['rating']
    R = x['votes']
    return (v/(v+m) * R) + (m/(m+v) * C)

q_movies['metascore'] = q_movies.apply(weighted_rating, axis=1)
q_movies = q_movies.sort_values('metascore', ascending=False)
q_movies[['title', 'type', 'votes', 'metascore']].head(10)

pop = df.sort_values('duration', ascending=False)

plt.figure(figsize=(12,4))
plt.barh(pop['title'].head(6), pop['duration'].head(6), align='center', color='skyblue')
plt.gca().invert_yaxis()
plt.xlabel("Runtime")
plt.title("duration")

tfidf = TfidfVectorizer(stop_words='english')

df['director'] = df['director'].fillna('')

tfidf_matrix = tfidf.fit_transform(df['director'])
tfidf_matrix.shape

cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)
indices = pd.Series(df.index, index=df['title']).drop_duplicates()

def get_recommendations(Title, cosine_sim=cosine_sim):
    idx = indices[Title]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:11]
    movie_indices = [i[0] for i in sim_scores]
    return df['title'].iloc[movie_indices]

movies = get_recommendations('Moonlight')
movies2 = get_recommendations('Cars')
features = ['Title', 'Genre', 'Description' 'Director', 'Actors']
for feature in features:
    df[feature] = df[feature].apply(literal_eval)

def get_director(x):
    for i in x:
        if i['job'] == 'Director':
            return i['name']
    return np.nan

def get_list(x):
    if isinstance(x, list):
        names = [i['name'] for i in x]
        if len(names) > 3:
            names = names[:3]
        return names

    return []

df['Director'] = df['Genre'].apply(get_director)

features = ['Title', 'Genre', 'Description' 'Director', 'Actors']
for feature in features:
    df[feature] = df[feature].apply(get_list)

    df['Title', 'Genre', 'Description' 'Director', 'Actors'].head(3)

def clean_data(x):
    if isinstance(x, list):
        return [str.lower(i.replace(" ", "")) for i in x]
    else:
        #Check if director exists. If not, return empty string
        if isinstance(x, str):
            return str.lower(x.replace(" ", ""))
        else:
            return ''