import pandas as pd 
import numpy as np 
import matplotlib as plt
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

df=pd.read_csv('/Users/akshaykathuria/Documents/Data Sets/IMDB-Movie-Data.csv')


C= df['Rating'].mean()
m= df['Votes'].quantile(0.9)

q_movies = df.copy().loc[df['Votes'] >= m]

def weighted_rating(x, m=m, C=C):
    v = x['Rating']
    R = x['Votes']
    return (v/(v+m) * R) + (m/(m+v) * C)

q_movies['Metascore'] = q_movies.apply(weighted_rating, axis=1)
q_movies = q_movies.sort_values('Metascore', ascending=False)
q_movies[['Title', 'Genre', 'Votes', 'Metascore']].head(10)

pop= df.sort_values('Runtime (Minutes)', ascending=False)
import matplotlib.pyplot as plt
plt.figure(figsize=(12,4))

plt.barh(pop['Title'].head(6),pop['Runtime (Minutes)'].head(6), align='center',
        color='skyblue')
plt.gca().invert_yaxis()
plt.xlabel("Runtime")
plt.title("Runtime (Minutes)")

tfidf = TfidfVectorizer(stop_words='english')

df['Director'] = df['Director'].fillna('')

tfidf_matrix = tfidf.fit_transform(df['Director'])
tfidf_matrix.shape

cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)
indices = pd.Series(df.index, index=df['Title']).drop_duplicates()


def get_recommendations(Title, cosine_sim=cosine_sim):
  
    idx = indices[Title]

    sim_scores = list(enumerate(cosine_sim[idx]))

    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    sim_scores = sim_scores[1:11]

    movie_indices = [i[0] for i in sim_scores]

    return df['Title'].iloc[movie_indices]
movies = get_recommendations('Gold')
# movies2 = get_recommendations('Lion')

print('movies')
# print(movies2)